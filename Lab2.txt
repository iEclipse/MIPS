.data
	array: .space 80
	prompt: .asciiz "Enter an integer: "
	smallest: .asciiz "\nSmallest value in the array: "
	largest: .asciiz "\nLargest value in the array: "
	div: .asciiz "\nNumber of integers divisible by 4: "
	sum: .asciiz "\nSum: "
	product: .asciiz "\nProduct: "
	
.globl main
.text

main:
	# Assigned Addresses
	la $t0, array
	li $t1, 20

loop:
	# Prompts User Input
	blez $t1, continue
	la $a0, prompt
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	addi $t1, $t1, -1
	sw $v0, ($t0)
	addi $t0, $t0, 4
	addi $t2, $t2, 1
	b loop
	
continue:
	# Function Calls
	jal smallestLargest
	jal divisible
	jal sumProduct
	li $v0, 10
	syscall
	
smallestLargest:
	# Load Initial Values
	la $t0, array
	li $t1, 19
	lw $t2, ($t0)
	lw $t3, ($t0)
	addi $t0, $t0, 4
	
	# Loads Next Value
	loadVal:
	lw $a0, ($t0)
	sub $a2, $t2, $a0
	sub $a3, $t3, $a0
	
	# Checks for Smaller Values
	loops:
	bltz $a2, loopl
	lw $t2, ($t0)
	
	# Checks for Larger Values
	loopl:
	bgtz $a3, sLContinue
	lw $t3, ($t0)
	
	# Increments Values
	sLContinue:
	addi $t1, $t1, -1
	addi $t0, $t0, 4
	bgtz $t1 loadVal
	
	# Prints Values
	sLPrint:
	la $a0, smallest
	li $v0, 4
	syscall
	la $a0, ($t2)
	li $v0, 1
	syscall
	la $a0, largest
	li $v0, 4
	syscall
	la $a0, ($t3)
	li $v0, 1
	syscall
	jr $ra

divisible:
	#Loads Values
	la $t0, array
	li $t1, 20
	li $t2, 0
	
loopDiv:
	# Checks for Divisible Integers
	blez $t1, printDiv
	lw $a0, ($t0)
	div $a0, $a0, 4
	mfhi $a1
	bnez $a1, divContinue
	addi $t2, $t2, 1
	
	# Increments Values
	divContinue:
	addi $t1, $t1, -1
	addi $t0, $t0, 4
	b loopDiv
	
printDiv:
	# Prints Values
	la $a0,	div
	li $v0, 4
	syscall
	la $a0, ($t2)
	li $v0, 1
	syscall
	jr $ra

sumProduct:
	#Loads Values
	la $t0, array
	li $t1, 19
	lw $t2, ($t0)
	lw $t3, ($t0)

	loopAdd:
	# Checks for Divisible Integers
	blez $t1, printSumProduct
	lw $a0, ($t0)
	add $t2, $t2, $a0
	mul $t3, $t3, $a0
	
	# Increments Values
	aMContinue:
	addi $t1, $t1, -1
	addi $t0, $t0, 4
	b loopAdd

	# Prints Values
	printSumProduct:
	la $a0, sum
	li $v0, 4
	syscall
	la $a0, ($t2)
	li $v0, 1
	syscall
	la $a0, product
	li $v0, 4
	syscall
	la $a0, ($t3)
	li $v0, 1
	syscall
	jr $ra