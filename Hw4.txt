.data
	input1: .asciiz "Input First Integer (A): "
	input0: .asciiz "Input Second Integer (B): "
	outputGCD: .asciiz "GCD(A, B): "
	outputExponent: .asciiz "\nEXP(A, B): "
.globl main
.text

main:
	la $a0, input1
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	la $t0, ($v0)
	la $a0, input0
	li $v0, 4
	syscall
	li $v0, 5
	syscall
	la $t1, ($v0)
			
	printGCD:	
	la $a0, outputGCD
	li $v0, 4
	syscall
	la $a0, ($t0)
	la $a1, ($t1)
	jal gcd
	la $a0, ($v0)
	li $v0, 1
	syscall
	
	printExponent:
	la $a0, outputExponent
	li $v0, 4
	syscall
	la $a0, ($t0)
	la $a1, ($t1)
	jal exponent
	la $a0, ($v0)
	li $v0, 1
	syscall
	li $v0, 10
	syscall
	
gcd:	
	absVal1:
	bgtz $a0, absVal2
	sub $a0, $zero, $a0
	
	absVal2:
	bgtz $a1, flipArgs
	sub $a1, $zero, $a1
		
	flipArgs:
	blt $a0, $a1, cont
	la $a2, ($a0)
	la $a0, ($a1)
	la $a1, ($a2)
	
	cont:
	la $v0, ($a0)
	
	equalCheck:
	bne $a0, $a1, loop
	la $v0, ($a0)
	jr $ra
	
	loop:	
	beqz $v0, endLoop
	div $a0, $v0
	mfhi $a0
	div $a1, $v0
	mfhi $a1
	addi $v0, $v0, -1
	bnez $a0, loop
	bnez $a1, loop
	
	endLoop:
	addi $v0, $v0, 1
	jr $ra
	
exponent:
	li $v0, 1
	la $a2, ($a1)
	
	bnez $a0, loopExp
	bnez $a1, loopExp
	li $v0, 0
	jr $ra
	
	loopExp:
	bgtz $a2, contExp
	jr $ra
	
	contExp:
	mul $v0, $v0, $a0
	addi $a2, $a2, -1
	j loopExp